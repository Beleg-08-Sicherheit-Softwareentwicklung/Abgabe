
@inproceedings{oueslati_literature_2015,
	title = {Literature {Review} of the {Challenges} of {Developing} {Secure} {Software} {Using} the {Agile} {Approach}},
	url = {https://ieeexplore.ieee.org/abstract/document/7299963},
	doi = {10.1109/ARES.2015.69},
	abstract = {A set of challenges of developing secure software using the agile development approach and methods are reported in the literature. This paper reports about a systematic literature review to identify these challenges and evaluates the causes of each of these challenges, with respect to the agile values, the agile principles, and the security assurance practices. We identified in this study 20 challenges, which are reported in 10 publications. We found that 14 of these challenges are valid and 6 are neither caused by the agile values and principles, nor by the security assurance practices. We also found that 2 of the the valid challenges are related to the software development life-cycle, 4are related to incremental development, 4 are related to security assurance, 2 are related to awareness and collaboration, and 2 are related to security management. These results justify the need for research to make developing secure software smooth.},
	urldate = {2024-12-09},
	booktitle = {2015 10th {International} {Conference} on {Availability}, {Reliability} and {Security}},
	author = {Oueslati, Hela and Rahman, Mohammad Masudur and Othmane, Lotfi ben},
	month = aug,
	year = {2015},
	keywords = {Security, Bibliographies, agile approch, challenges, Documentation, Organizations, secure sofwtare development, Software, Systematics, Testing, Herausforderungen},
	pages = {540--547},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/MG7DCG6T/Oueslati et al. - 2015 - Literature Review of the Challenges of Developing .pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/TX2PYCC6/7299963.html:text/html},
}

@inproceedings{ramirez_survey_2020,
	title = {A {Survey} and {Comparison} of {Secure} {Software} {Development} {Standards}},
	url = {https://ieeexplore.ieee.org/abstract/document/9322704},
	doi = {10.1109/CMI51275.2020.9322704},
	abstract = {There are standards, guidelines, and certifications for software security to help guide software development projects into becoming more securely written to comply with any regulations that may apply to the project. These best practices and standards include Common Criteria, The Open Group Architecture Framework (TOGAF), Security Assurance Maturity Model (SAMM), Building Security In Maturity Model (BSIMM), Application Security Verification Standard (ASVS), OWASP, and SAFECode, in addition to the national or international standards groups, PCI, NIST and ISO/IEC. In this paper, we focus on secure software development by surveying and comparing these methods and standards and discover which areas of the software development life cycle SDLC, that one or more could be applied to improve the security of a software application during its development lifecycle.},
	urldate = {2024-12-09},
	booktitle = {2020 13th {CMI} {Conference} on {Cybersecurity} and {Privacy} ({CMI}) - {Digital} {Transformation} - {Potentials} and {Challenges}(51275)},
	author = {Ramirez, Armando and Aiello, Anthony and Lincke, Susan J},
	month = nov,
	year = {2020},
	keywords = {Security, Software, BSIMM, CC, Guidelines, Industries, ISO Standards, NIST, OWASP, risk, risk assessment, risk management, SAFECode, SAMM, security standards, Standards, TOGAF},
	pages = {1--6},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/ZD78QZXW/Ramirez et al. - 2020 - A Survey and Comparison of Secure Software Develop.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/X2APRBE9/9322704.html:text/html},
}

@inproceedings{rani_shift-left_2023,
	title = {Shift-{Left} {Testing} in {DevOps}: {A} {Study} of {Benefits}, {Challenges}, and {Best} {Practices}},
	shorttitle = {Shift-{Left} {Testing} in {DevOps}},
	url = {https://ieeexplore.ieee.org/document/10404436/?arnumber=10404436},
	doi = {10.1109/ICACRS58579.2023.10404436},
	abstract = {DevOps aims to integrate software development and operations to improve products and provide value to consumers. However, many firms implement DevOps primarily from a traditional standpoint, that is, from development to operations. Shift-Left Testing, a crucial aspect of agile software development, places strong emphasis on incorporating test cases at the beginning stages of a project’s life cycle. This study explores the effects of implementing Shift-Left Testing approach. Research examines how relocating testing activities to initial phases of software development accelerates input and decreases overall development time. Study investigates benefits of this strategy, such as defect prevention and speedier delivery, as well as implications for quality software development. Study contributes to knowledge of Shift-Left Testing’s usefulness in contemporary software development techniques by assessing early results and future activities in this setting. Examining shift of organizations from traditional to continuous testing, this research evaluates current best practices in this domain. Proposed model of Shift-Left Testing is to understand how it’s currently being used and figure out best ways to make it work well. Findings emphasize that achieving and integrating Shift-Left Testing poses in-sprint testing to be highly challenging. Study Encompasses Goals, Methodology, Potential Outcomes, and Comparison of Defect Detection and Cost to Fix Bugs in a Few Case Studies, Establishing It as a Valuable Resource for Professionals and Researchers in the Field.},
	urldate = {2024-12-09},
	booktitle = {2023 2nd {International} {Conference} on {Automation}, {Computing} and {Renewable} {Systems} ({ICACRS})},
	author = {Rani, V Shobha and Babu, Dr A Ramesh and Deepthi, K. and Reddy, Vallem Ranadheer},
	month = dec,
	year = {2023},
	keywords = {Software, Testing, and Continuous-Testing, Best practices, Computer bugs, Costs, DevOps, Shift-left Testing, Virtual prototyping},
	pages = {1675--1680},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/EVEREXB9/Rani et al. - 2023 - Shift-Left Testing in DevOps A Study of Benefits,.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/QUH8PTJY/10404436.html:text/html},
}

@inproceedings{bjerke-gulstuen_high_2015,
	address = {Cham},
	title = {High {Level} {Test} {Driven} {Development} – {Shift} {Left}},
	isbn = {978-3-319-18612-2},
	doi = {10.1007/978-3-319-18612-2_23},
	abstract = {Agile development methods are increasingly used in large projects, with many development teams. Because acceptance testing can require a large chain of features to be completed, testing is often carried out late in such projects. In this experience report, we describe a large project where 11 development teams delivered a system in 12 three week iterations. We also describe how the focus of test activities was shifted towards the earlier phases of development, what we call “shift left”. This involved shifting the focus both within the iterations, and in how the overall testing work was organized. We describe the results of this change, and provide recommendations for how to organize test work in future large-scale development projects.},
	language = {en},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming}},
	publisher = {Springer International Publishing},
	author = {Bjerke-Gulstuen, Kristian and Larsen, Emil Wiik and Stålhane, Tor and Dingsøyr, Torgeir},
	editor = {Lassenius, Casper and Dingsøyr, Torgeir and Paasivaara, Maria},
	year = {2015},
	keywords = {Agile methods, Inter-team coordination, Large-scale agile development, Scrum, Software engineering, Test, Test organization},
	pages = {239--247},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/PXW4WQ9I/Bjerke-Gulstuen et al. - 2015 - High Level Test Driven Development – Shift Left.pdf:application/pdf},
}

@inproceedings{bartsch_practitioners_2011,
	title = {Practitioners' {Perspectives} on {Security} in {Agile} {Development}},
	url = {https://ieeexplore.ieee.org/document/6046004},
	doi = {10.1109/ARES.2011.82},
	abstract = {Agile methods are widely employed to develop high-quality software, but theoretical analyses argue that agile methods are inadequate for security-critical projects. However, most agile-developed software today needs to satisfy baseline security requirements, so that we need to focus on how to achieve this this level for typical agile projects. In this paper, we provide insights from the practitioner's perspective on security in agile development and report on exploratory, qualitative findings from interviews. Our findings extend the theoretical prior work and suggest to focus on adequate customer involvement, developer security awareness and expertise, and continuously improving the development process for security.},
	urldate = {2024-12-05},
	booktitle = {2011 {Sixth} {International} {Conference} on {Availability}, {Reliability} and {Security}},
	author = {Bartsch, Steffen},
	month = aug,
	year = {2011},
	keywords = {Security, Documentation, Software, Agile development, Companies, Context, Developer awareness, Empirical study, Interviews, Programming, Secure software development, Security requirements},
	pages = {479--484},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/SV9KZMKY/Bartsch - 2011 - Practitioners' Perspectives on Security in Agile D.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/DWK4UAQT/6046004.html:text/html},
}

@inproceedings{van_der_heijden_empirical_2018,
	address = {Oulu Finland},
	title = {An empirical perspective on security challenges in large-scale agile software development},
	isbn = {978-1-4503-5823-1},
	url = {https://dl.acm.org/doi/10.1145/3239235.3267426},
	doi = {10.1145/3239235.3267426},
	abstract = {Background Agile methods have been shown to have a negative impact on security. Several studies have investigated challenges in aligning security practices with agile methods, however, none of these have examined security challenges in the context of largescale agile. Large-scale agile can present unique challenges, as large organizations often involve highly interdependent teams that need to align with other (non-agile) departments. Goal Our objective is to identify security challenges encountered in large-scale agile software development from the perspective of agile practitioners. Method Cooperative Method Development is applied to guide a qualitative case study at Rabobank, a Dutch multinational banking organization. A total of ten interviews is conducted with members in different agile roles from five different agile development teams. Data saturation has been obtained. By open card sorting we identify challenges pertaining to security in agile. Results The following challenges appear to be unique to large-scale agile: alignment of security objectives in a distributed setting, developing a common understanding of the roles and responsibilities in security activities, and integration of low-overhead security testing tools. Additional challenges reported appear to be common to security in software development in general or concur with challenges reported for small-scale agile. Conclusions The reported findings suggest the presence of multiple security challenges unique to large-scale agile. Future work should focus on confirming these challenges and investigating possible mitigations.},
	language = {en},
	urldate = {2024-12-05},
	booktitle = {Proceedings of the 12th {ACM}/{IEEE} {International} {Symposium} on {Empirical} {Software} {Engineering} and {Measurement}},
	publisher = {ACM},
	author = {Van Der Heijden, Amber and Broasca, Cosmin and Serebrenik, Alexander},
	month = oct,
	year = {2018},
	pages = {1--4},
	file = {Van Der Heijden et al. - 2018 - An empirical perspective on security challenges in.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/6AT9DMHL/Van Der Heijden et al. - 2018 - An empirical perspective on security challenges in.pdf:application/pdf},
}

@inproceedings{nagele_investigating_2022,
	address = {Cham},
	title = {Investigating the {Current} {State} of {Security} in {Large}-{Scale} {Agile} {Development}},
	isbn = {978-3-031-08169-9},
	doi = {10.1007/978-3-031-08169-9_13},
	abstract = {Agile methods have become the established way to successfully handle changing requirements and time-to-market pressure, even in large-scale environments. Simultaneously, security has become an increasingly important concern due to more frequent and impactful incidents, stricter regulations with growing fines, and reputational damages. Despite its importance, research on how to address security in large-scale agile development is scarce. Therefore, this paper provides an empirical investigation on tackling software product security in large-scale agile environments. Based on a literature review and preliminary interviews, we identified four essential categories that impact how to handle security: (i) the structure of the agile program, (ii) security governance, (iii) adaptions of security activities to agile processes, and (iv) tool-support and automation. We conducted semi-structured interviews with nine experts from nine companies in five industries based on these categories. We performed a content-structuring qualitative analysis to reveal recurring patterns of best practices and challenges in those categories and identify differences between organizations. Among the key findings is that the analyzed organizations introduce cross-team security-focused roles collaborating with agile teams and use automation where possible. Moreover, security governance is still driven top-down, which conflicts with team autonomy in agile settings.},
	language = {en},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming}},
	publisher = {Springer International Publishing},
	author = {Nägele, Sascha and Watzelt, Jan-Philipp and Matthes, Florian},
	editor = {Stray, Viktoria and Stol, Klaas-Jan and Paasivaara, Maria and Kruchten, Philippe},
	year = {2022},
	keywords = {Security, Large-scale agile, Software development, Organisationsstrukturen},
	pages = {203--219},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/JYRMLHXH/Nägele et al. - 2022 - Investigating the Current State of Security in Lar.pdf:application/pdf},
}

@inproceedings{andriadi_impact_2023,
	title = {The {Impact} of {Shift}-{Left} {Testing} to {Software} {Quality} in {Agile} {Methodology}: {A} {Case} {Study}},
	shorttitle = {The {Impact} of {Shift}-{Left} {Testing} to {Software} {Quality} in {Agile} {Methodology}},
	url = {https://ieeexplore.ieee.org/abstract/document/10277919},
	doi = {10.1109/ICIMTech59029.2023.10277919},
	abstract = {The point of Agile Methodology is continuous improvement, delivering a small feature quickly without sacrificing the feature quality; every sprint must be better than the previous sprint, and better can be fewer bugs, faster development, and testing. We will present how we reduce production bugs by customizing our sprint iteration. As we know, bugs are unavoidable, there is no software engineer that can make software without a bug; however, we can reduce bugs in production if we can find bugs in lower environments as early as possible. The case study in this paper was taken from one of technology company in Indonesia, the activity was done by the Quality Engineer (QA) Team. We will show that shift-left testing can help us reduce bugs in production. Testing is part of agile methodology, and the main idea of shift-left testing is to move testing early and could be done by any team member, not only QA. We include shift-left testing in our agile methodology for one year in 2022 and compare the result in the previous year.},
	urldate = {2025-01-07},
	booktitle = {2023 {International} {Conference} on {Information} {Management} and {Technology} ({ICIMTech})},
	author = {Andriadi, Kus and Soeparno, Haryono and Gaol, Ford Lumban and Arifin, Yulyani},
	month = aug,
	year = {2023},
	note = {ISSN: 2837-2778},
	keywords = {Testing, Computer bugs, Companies, agile, Continuous improvement, Information management, Production, shift left testing, software quality, Software quality, software testing, Shift-Left},
	pages = {259--264},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/SXFVZ56R/Andriadi et al. - 2023 - The Impact of Shift-Left Testing to Software Quali.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/BYBMP6EP/10277919.html:text/html},
}

@inproceedings{bjerke-gulstuen_high_2015-1,
	address = {Cham},
	title = {High {Level} {Test} {Driven} {Development} – {Shift} {Left}},
	isbn = {978-3-319-18612-2},
	doi = {10.1007/978-3-319-18612-2_23},
	abstract = {Agile development methods are increasingly used in large projects, with many development teams. Because acceptance testing can require a large chain of features to be completed, testing is often carried out late in such projects. In this experience report, we describe a large project where 11 development teams delivered a system in 12 three week iterations. We also describe how the focus of test activities was shifted towards the earlier phases of development, what we call “shift left”. This involved shifting the focus both within the iterations, and in how the overall testing work was organized. We describe the results of this change, and provide recommendations for how to organize test work in future large-scale development projects.},
	language = {en},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming}},
	publisher = {Springer International Publishing},
	author = {Bjerke-Gulstuen, Kristian and Larsen, Emil Wiik and Stålhane, Tor and Dingsøyr, Torgeir},
	editor = {Lassenius, Casper and Dingsøyr, Torgeir and Paasivaara, Maria},
	year = {2015},
	keywords = {Agile methods, Inter-team coordination, Large-scale agile development, Scrum, Software engineering, Test, Test organization, Shift-Left},
	pages = {239--247},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/CHVCYYDP/Bjerke-Gulstuen et al. - 2015 - High Level Test Driven Development – Shift Left.pdf:application/pdf},
}

@techreport{ensor_shifting_2021,
	title = {Shifting left on security: {Securing} software supply chains {\textbar} {Solutions}},
	shorttitle = {Shifting left on security},
	url = {https://cloud.google.com/solutions/shifting-left-on-security},
	institution = {Google Cloud},
	author = {Ensor, Mike and Stevens, Drew},
	month = feb,
	year = {2021},
	keywords = {Shift-Left},
	file = {Ensor and Stevens - 2021 - Shifting left on security Securing software suppl.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/HS2A7CFP/Ensor and Stevens - 2021 - Shifting left on security Securing software suppl.pdf:application/pdf},
}

@article{valdes-rodriguez_analysis_2024,
	title = {Analysis of {Strategies} for the {Integration} of {Security} {Practices} in {Agile} {Software} {Development}: {A} {Sustainable} {SME} {Approach}},
	volume = {12},
	issn = {2169-3536},
	shorttitle = {Analysis of {Strategies} for the {Integration} of {Security} {Practices} in {Agile} {Software} {Development}},
	url = {https://ieeexplore.ieee.org/abstract/document/10456904},
	doi = {10.1109/ACCESS.2024.3372385},
	abstract = {Incorporating security into software development in small and medium-sized enterprises (SMEs) is an increasingly relevant challenge and a crucial necessity, especially in an uncertain and fast-paced environment like that of an agile setting. Given the growing threat of cyberattacks, it is imperative to address this issue. This article examines and subsequently analyzes existing strategies in the literature regarding secure software development in the context of SMEs employing agile methodologies. The study initiates a systematic literature review to identify strategies employed in this context. The findings reveal that 57.9\% of the studies present strategies to tackle security in agile software development, with 20.2\% specifically focusing on SMEs. Subsequently, practices demonstrating success in integrating security measures into the software development lifecycle (SDLC) are analyzed and categorized. The results underscore the necessity of addressing security in the agile environment, as it remains a significant challenge in software development. Effective approaches are also required for small businesses to ensure application protection and long-term sustainability.},
	urldate = {2025-01-07},
	journal = {IEEE Access},
	author = {Valdés-Rodríguez, Yolanda and Hochstetter-Diez, Jorge and Diéguez-Rebolledo, Mauricio and Bustamante-Mora, Ana and Cadena-Martínez, Rodrigo},
	year = {2024},
	note = {Conference Name: IEEE Access},
	keywords = {Security, Software, Systematics, Agile development, Companies, Agile software development, Application security, Enterprise resource planning, Organisationsstrukturen, secure development, security practices, SMEs, Software development management, sustainability, Sustainable development},
	pages = {35204--35230},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/3BJZRWIE/Valdés-Rodríguez et al. - 2024 - Analysis of Strategies for the Integration of Secu.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/QGGFHIPV/10456904.html:text/html},
}

@article{lombardi_devops_2023,
	title = {From {DevOps} to {DevSecOps} is not enough. {CyberDevOps}: an extreme shifting-left architecture to bring cybersecurity within software security lifecycle pipeline},
	volume = {31},
	issn = {1573-1367},
	shorttitle = {From {DevOps} to {DevSecOps} is not enough. {CyberDevOps}},
	url = {https://doi.org/10.1007/s11219-023-09619-3},
	doi = {10.1007/s11219-023-09619-3},
	abstract = {Software engineering is evolving quickly leading to an urgency to discover more efficient development models. DevOps and its security-oriented extension DevSecOps promised to speed up the development process while ensuring more robust code. However, many third-party libraries and infrastructure vulnerabilities may still pose security flaws. Besides, regulatory compliance and standards go beyond  secure software asking for comprehensive security and accurate infrastructure hardening. Thus, we may wonder: is DevSecOps enough? In this paper, we propose CyberDevOps, a novel architecture which integrates cybersecurity within DevSecOps. Specifically, (i) we revise software composition analysis to deal with nondeterministic environments and (ii) we incorporate vulnerability assessment and compliance within a further pipeline step. To assess the effectiveness of CyberDevOps, we conduct an experimental evaluation. Specifically, we attack a web application and we show how CyberDevOps is able to detect hidden defects while a standard DevSecOps pipeline fails. Furthermore, we assess code quality and security by comparing DevOps, DevSecOps, and CyberDevOps by monitoring two Conio code bases over a year. The results show that CyberDevOps helps to fix up to 100\% of known bugs and vulnerabilities and improve significantly the code quality.},
	language = {en},
	number = {2},
	urldate = {2025-01-07},
	journal = {Software Quality Journal},
	author = {Lombardi, Federico and Fanton, Alberto},
	month = jun,
	year = {2023},
	keywords = {DevOps, Shift-Left, Compliance, DevSecOps, Vulnerability assessment},
	pages = {619--654},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/BMIXHUF7/Lombardi and Fanton - 2023 - From DevOps to DevSecOps is not enough. CyberDevOp.pdf:application/pdf},
}

@inproceedings{poller_can_2017,
	address = {Portland Oregon USA},
	title = {Can {Security} {Become} a {Routine}?: {A} {Study} of {Organizational} {Change} in an {Agile} {Software} {Development} {Group}},
	isbn = {978-1-4503-4335-0},
	shorttitle = {Can {Security} {Become} a {Routine}?},
	url = {https://dl.acm.org/doi/10.1145/2998181.2998191},
	doi = {10.1145/2998181.2998191},
	abstract = {Organizational factors inﬂuence the success of security initiatives in software development. Security audits and developer training can motivate development teams to adopt security practices, but their interplay with organizational structures and routines remains unclear. We studied how security consultancy affected organizational routines in a software development group. Security consultants tested their product, reported vulnerabilities, and delivered a security training. We followed the group during and after consultancy events. As a result of the consultancy, group members improved their understanding of security issues, but could not effect a change of routines within the given organizational structure. They handled vulnerabilities in a stabilization routine without changes in feature development, where security remained intangible. Interestingly, group members acknowledged an unfulﬁlled need for change but defended the structure inhibiting change. Security initiatives need to consider this interplay of structure and situated practice, and manage change in addition to providing expertise and tools.},
	language = {en},
	urldate = {2025-01-07},
	booktitle = {Proceedings of the 2017 {ACM} {Conference} on {Computer} {Supported} {Cooperative} {Work} and {Social} {Computing}},
	publisher = {ACM},
	author = {Poller, Andreas and Kocksch, Laura and Türpe, Sven and Epp, Felix Anand and Kinder-Kurlanda, Katharina},
	month = feb,
	year = {2017},
	keywords = {Organisationsstrukturen},
	pages = {2489--2503},
	file = {Poller et al. - 2017 - Can Security Become a Routine A Study of Organiz.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/J4THUP2Y/Poller et al. - 2017 - Can Security Become a Routine A Study of Organiz.pdf:application/pdf},
}

@inproceedings{petit_earn_2019,
	address = {Cham},
	title = {Earn {Your} {Wings}: {A} {Novel} {Approach} to {Deployment} {Governance}},
	isbn = {978-3-030-30126-2},
	shorttitle = {Earn {Your} {Wings}},
	doi = {10.1007/978-3-030-30126-2_8},
	abstract = {This paper presents a model to assess team autonomy developed and deployed in a South African bank’s IT department. The bank has been deploying SAFe® for the last two years and in the process has increased significantly the number of software releases. Historically, the teams had to obtain multiple levels of authorization prior to a release but this level of governance and control was contradictory to the principle of team empowerment at the core of agile approaches. The model is inspired from the theme of a pilot’s ability to fly an aircraft using five levels. The level is determined based on team fly-ability and elevation safety described in detail in this paper. Team fly-ability includes two elements: (1) maturity of engineering practices and (2) the ability to manage traceability and risk through ease of recovery. Elevation Safety is based on two components: (1) historical data on deployment performance and severity of incidents and (2) the application dynamics and criticality. The main benefits of this program are improved accountability of teams, reduced approval time, and reduced attempts to find workarounds and loopholes.},
	language = {en},
	booktitle = {Agile {Processes} in {Software} {Engineering} and {Extreme} {Programming} – {Workshops}},
	publisher = {Springer International Publishing},
	author = {Petit, Yvan and Marnewick, Carl},
	editor = {Hoda, Rashina},
	year = {2019},
	keywords = {Frameworks, Deployment, Governance, Scaling agile, Team autonomy, EarnYourWings},
	pages = {64--71},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/ZK3FEQNA/Petit and Marnewick - 2019 - Earn Your Wings A Novel Approach to Deployment Go.pdf:application/pdf},
}

@inproceedings{nagele_current_2023,
	title = {The {Current} {State} of {Security} {Governance} and {Compliance} in {Large}-{Scale} {Agile} {Development}: {A} {Systematic} {Literature} {Review} and {Interview} {Study}},
	shorttitle = {The {Current} {State} of {Security} {Governance} and {Compliance} in {Large}-{Scale} {Agile} {Development}},
	url = {https://ieeexplore.ieee.org/abstract/document/10187439},
	doi = {10.1109/CBI58679.2023.10187439},
	abstract = {Agile methodologies have gained popularity in software and information systems engineering due to their ability to enable rapid adaption to changing requirements and ensure business value creation in fast-paced environments. However, scaling agile to multiple teams presents challenges related to security governance and compliance. Traditional security activities struggle to keep pace with iterative agile methods. The tension between security and agility intensifies in scaled environments as governance and compliance procedures conflict with the desired autonomy of agile teams. With the increase in the number and complexity of security risks, it is imperative to better understand the current challenges and solution approaches for security governance in large-scale agile development (LSAD). To this end, we conducted a systematic literature review and an interview study involving nine industry experts. We identified 15 relevant challenges and analyzed existing LSAD frameworks concerning their solution approaches for achieving security governance and compliance. In addition, we contribute an overview of alternative solution approaches and propose five factors to balance control and autonomy to mitigate security challenges in LSAD. Our findings provide a foundation for developing well-grounded solution artifacts that address the identified challenges,},
	urldate = {2025-01-08},
	booktitle = {2023 {IEEE} 25th {Conference} on {Business} {Informatics} ({CBI})},
	author = {Nägele, Sascha and Schenk, Nathalie and Matthes, Florian},
	month = jun,
	year = {2023},
	note = {ISSN: 2378-1971},
	keywords = {Security, Bibliographies, Frameworks, Software, Systematics, Industries, Complexity theory, interview study, Iterative methods, large-scale agile, security, software development, systematic literature review, Herausforderungen},
	pages = {1--10},
	file = {Nägele et al. - 2023 - The Current State of Security Governance and Compl.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/F9SPHDDX/Nägele et al. - 2023 - The Current State of Security Governance and Compl.pdf:application/pdf},
}

@incollection{moyon_how_2020,
	title = {How to {Integrate} {Security} {Compliance} {Requirements} with {Agile} {Software} {Engineering} at {Scale}?},
	isbn = {978-3-030-64147-4},
	abstract = {Integrating security into agile software development is an open issue for research and practice. Especially in strongly regulated industries, complexity increases not only when scaling agile practices but also when aiming for compliance with security standards. To achieve security compliance in a large-scale agile context, we developed S2C-SAFe: An extension of the Scaled Agile Framework that is compliant to the security standard IEC 62443-4-1 for secure product development. In this paper, we present the framework and its evaluation by agile and security experts within Siemens’ large-scale project ecosystem. We discuss benefits and limitations as well as challenges from a practitioners’ perspective. Our results indicate that S2C-SAFe contributes to successfully integrating security compliance with lean and agile development in regulated environments. We also hope to raise awareness for the importance and challenges of integrating security in the scope of Continuous Software Engineering.},
	author = {Moyón, Fabiola and Méndez Fernández, Daniel and Beckers, Kristian and Klepper, Sebastian},
	month = nov,
	year = {2020},
	doi = {10.1007/978-3-030-64148-1_5},
	keywords = {Frameworks, S2C-SAFe},
	pages = {69--87},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/UZQ2JR27/Moyón et al. - 2020 - How to Integrate Security Compliance Requirements .pdf:application/pdf},
}

@inproceedings{thool_securing_2024,
	address = {New York, NY, USA},
	series = {{EASE} '24},
	title = {Securing {Agile}: {Assessing} the {Impact} of {Security} {Activities} on {Agile} {Development}},
	isbn = {979-8-4007-1701-7},
	shorttitle = {Securing {Agile}},
	url = {https://dl.acm.org/doi/10.1145/3661167.3661280},
	doi = {10.1145/3661167.3661280},
	abstract = {Software systems are expected to be secure and robust. To verify and ensure software security, it is vital to include security activities, or development practices to detect and prevent security vulnerabilities, into the software development process. Agile software development is a popular software engineering (SE) process used by many organizations and development teams. However, while Agile aims to be a lightweight and responsive process, security activities are typically more cumbersome and involve more documentation and tools–violating the core principles of Agile. This work investigates the impact of security activities on various aspects of Agile development. To understand how software engineers perceive incorporating security practices into Agile methodologies, we distributed an online survey to collect data from software practitioners with experience working in Agile teams. Our results from 34 survey participants show most software practitioners believe security activities are beneficial to development overall but lack confidence in their impact on the security of software systems. Our findings provide insight into how security activities affect Agile development and provide implications to help SE teams better incorporate security activities into implementing Agile development processes.},
	urldate = {2025-01-08},
	booktitle = {Proceedings of the 28th {International} {Conference} on {Evaluation} and {Assessment} in {Software} {Engineering}},
	publisher = {Association for Computing Machinery},
	author = {Thool, Arpit and Brown, Chris},
	month = jun,
	year = {2024},
	pages = {668--678},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/HXMQQ76V/Thool and Brown - 2024 - Securing Agile Assessing the Impact of Security A.pdf:application/pdf},
}

@article{mateo_tudela_combining_2020,
	title = {On {Combining} {Static}, {Dynamic} and {Interactive} {Analysis} {Security} {Testing} {Tools} to {Improve} {OWASP} {Top} {Ten} {Security} {Vulnerability} {Detection} in {Web} {Applications}},
	copyright = {http://creativecommons.org/licenses/by/3.0/},
	issn = {2076-3417},
	url = {https://www.mdpi.com/2076-3417/10/24/9119},
	doi = {10.3390/app10249119},
	abstract = {The design of the techniques and algorithms used by the static, dynamic and interactive security testing tools differ. Therefore, each tool detects to a greater or lesser extent each type of vulnerability for which they are designed for. In addition, their different designs mean that they have different percentages of false positives. In order to take advantage of the possible synergies that different analysis tools types may have, this paper combines several static, dynamic and interactive analysis security testing tools—static white box security analysis (SAST), dynamic black box security analysis (DAST) and interactive white box security analysis (IAST), respectively. The aim is to investigate how to improve the effectiveness of security vulnerability detection while reducing the number of false positives. Specifically, two static, two dynamic and two interactive security analysis tools will be combined to study their behavior using a specific benchmark for OWASP Top Ten security vulnerabilities and taking into account various scenarios of different criticality in terms of the applications analyzed. Finally, this study analyzes and discuss the values of the selected metrics applied to the results for each n-tools combination.},
	language = {en},
	urldate = {2025-01-09},
	journal = {Applied Sciences},
	author = {Mateo Tudela, Francesc and Bermejo Higuera, Juan-Ramón and Bermejo Higuera, Javier and Sicilia Montalvo, Juan-Antonio and Argyros, Michael I.},
	month = jan,
	year = {2020},
	note = {Number: 24
Publisher: Multidisciplinary Digital Publishing Institute},
	keywords = {analysis security testing, assessment methodology, dynamic analysis security testing, false negative, false positive, interactive analysis security testing, security vulnerability, static analysis security testing, tools combination, web application, Automated Testing},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/8RUBLGFY/Mateo Tudela et al. - 2020 - On Combining Static, Dynamic and Interactive Analysis Security Testing Tools to Improve OWASP Top Te.pdf:application/pdf},
}

@article{dencheva_comparative_nodate,
	title = {Comparative analysis of {Static} application security testing ({SAST}) and {Dynamic} application security testing ({DAST}) by using open-source web application penetration testing tools},
	abstract = {In the current age of fundamental science, technological progress and the fully globalized world of technology, Cybersecurity is extremely important to ensure a high level of protection in every single area of life. In addition, the challenges, and threats to securing protection in cyberspace are constantly increasing. There are many methods to prevent Cybersecurity, one of the fundamental and basic methods is performing security testing for vulnerabilities. It is the focus of this master’s thesis, which aims to examine, research, analyse, compare, and summarize the two main methods for performing this type of testing, namely Static application security testing (SAST) and Dynamic application security testing (DAST). Based on the prepared comparative analysis, the advantages, and disadvantages of both types of tools are established, which can be used as a basis for modelling a solution to achieve the most detailed, comprehensive, productive, and efficient performance of security testing for vulnerabilities. Achieving this extremely important research goal, the master’s thesis supports finding a solution for a complex combination of Static and Dynamic Application Security Testing tools, through which to examine web applications for vulnerabilities and to fix them, to increase the level of protection and ensure a high, reliable and effective Cybersecurity.},
	language = {en},
	author = {Dencheva, Lyubka},
	file = {PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/JYGMP2XL/Dencheva - Comparative analysis of Static application security testing (SAST) and Dynamic application security.pdf:application/pdf},
}

@inproceedings{pan_interactive_2019,
	title = {Interactive {Application} {Security} {Testing}},
	url = {https://ieeexplore.ieee.org/abstract/document/8901378?casa_token=CT0pP6ZFwwoAAAAA:AzT_BniXiBV529EVl-FVKz0XKFYUktCT_AKbl81AoQ8btI5o7ykugXO8vj1TBJ9PD6s0XFQj},
	doi = {10.1109/ICSGEA.2019.00131},
	abstract = {The operation of e-commerce platform requires very high security. Interactive Application Security Test (IAST) is a new generation of vulnerability analysis technology first proposed by Synopsys Company in the United States. This technology can effectively solve the technical vulnerabilities of various websites represented by e-commerce platform. This technology combines static application security test (SAST) with dynamic application security test (DAST) by using a unique design context context association mechanism. Through this deep integration of interaction capabilities and differential comparison mechanism, a fast and highly automated vulnerability analysis capability can be built in running applications. IAST integrates the advantages of SAST and DAST technology, continuously monitors and identifies vulnerabilities in applications. Aspect-oriented programming technology enables differential comparison mechanism to perform dynamic security analysis in running programs, and extracts contextual content, data flow and flow control information from active applications to provide targeted information. Run the access capability of the actual data values at the code level. Therefore, precisely because of these abundant information, the differential comparison mechanism can identify more anomalies than other existing security tools, and achieve unprecedented accuracy. Through IAST technology, it can also confirm or eliminate whether the detected vulnerabilities can be used to attack, and determine the location of the vulnerabilities in the application code. This technology has been listed as one of the top ten information security technologies in 2014 by Gartner Information Technology Research and Consulting Company of the United States, and has a very broad application prospects.},
	urldate = {2025-01-09},
	booktitle = {2019 {International} {Conference} on {Smart} {Grid} and {Electrical} {Automation} ({ICSGEA})},
	author = {Pan, Yuanyuan},
	month = aug,
	year = {2019},
	keywords = {DAST, IAST, Information security, SAST},
	pages = {558--561},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/5DVMIEKE/Pan - 2019 - Interactive Application Security Testing.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/8RCDTZGA/8901378.html:text/html},
}

@inproceedings{collins_software_2012,
	title = {Software {Test} {Automation} practices in agile development environment: {An} industry experience report},
	shorttitle = {Software {Test} {Automation} practices in agile development environment},
	url = {https://ieeexplore.ieee.org/abstract/document/6228991},
	doi = {10.1109/IWAST.2012.6228991},
	abstract = {The increased importance of Test Automation in software engineering is very evident considering the number of companies investing in automated testing tools nowadays, with the main aim of preventing defects during the development process. Test Automation is considered an essential activity for agile methodologies being the key to speed up the quality assurance process. This paper presents empirical observations and the challenges of a test team new to agile practices and Test Automation using open source testing tools integrated in software projects that use the Scrum methodology. The results obtained showed some important issues to be discussed and the Test Automation practices collected based on the experiences and lessons learned.},
	urldate = {2025-01-09},
	booktitle = {2012 7th {International} {Workshop} on {Automation} of {Software} {Test} ({AST})},
	author = {Collins, Eliane Figueiredo and de Lucena, Vicente Ferreira},
	month = jun,
	year = {2012},
	keywords = {Software, Testing, Programming, software testing, agile testing, Automation, Business, Graphical user interfaces, Manuals, test automation, testing tools},
	pages = {57--63},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/J279EY8T/Collins and de Lucena - 2012 - Software Test Automation practices in agile development environment An industry experience report.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/ZPZX68KB/6228991.html:text/html},
}

@article{rindell_security_2021,
	title = {Security in agile software development: {A} practitioner survey},
	volume = {131},
	issn = {0950-5849},
	shorttitle = {Security in agile software development},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584920302305},
	doi = {10.1016/j.infsof.2020.106488},
	abstract = {Context: Software security engineering provides the means to define, implement and verify security in software products. Software security engineering is performed by following a software security development life cycle model or a security capability maturity model. However, agile software development methods and processes, dominant in the software industry, are viewed to be in conflict with these security practices and the security requirements. Objective: Empirically verify the use and impact of software security engineering activities in the context of agile software development, as practiced by software developer professionals. Method: A survey (N=61) was performed among software practitioners in Finland regarding their use of 40 common security engineering practices and their perceived security impact, in conjunction with the use of 16 agile software development items and activities. Results: The use of agile items and activities had a measurable effect on the selection of security engineering practices. Perceived impact of the security practices was lower than the rate of use would imply: This was taken to indicate a selection bias, caused by e.g. developers’ awareness of only certain security engineering practices, or by difficulties in applying the security engineering practices into an iterative software development workflow. Security practices deemed to have most impact were proactive and took place in the early phases of software development. Conclusion: Systematic use of agile practices conformed, and was observed to take place in conjunction with the use of security practices. Security activities were most common in the requirement and implementation phases. In general, the activities taking place early in the life cycle were also considered most impactful. A discrepancy between the level of use and the perceived security impact of many security activities was observed. This prompts research and methodological development for better integration of security engineering activities into software development processes, methods, and tools.},
	urldate = {2025-01-09},
	journal = {Information and Software Technology},
	author = {Rindell, Kalle and Ruohonen, Jukka and Holvitie, Johannes and Hyrynsalmi, Sami and Leppänen, Ville},
	month = mar,
	year = {2021},
	keywords = {Agile software development, Security assurance, Security engineering, Security standards, Software security, Survey},
	pages = {106488},
	file = {Accepted Version:/home/maurice/snap/zotero-snap/common/Zotero/storage/K7R878WS/Rindell et al. - 2021 - Security in agile software development A practitioner survey.pdf:application/pdf;ScienceDirect Snapshot:/home/maurice/snap/zotero-snap/common/Zotero/storage/JPG4VDUU/S0950584920302305.html:text/html},
}

@inproceedings{brucker_deploying_2014,
	title = {Deploying static application security testing on a large scale},
	isbn = {978-3-88579-622-0},
	url = {https://dl.gi.de/handle/20.500.12116/20071},
	abstract = {Static Code Analysis (SCA), if used for finding vulnerabilities also called Static Application Security Testing (SAST), is an important technique for detecting software vulnerabilities already at an early stage in the software development lifecycle. As such, SCA is adopted by an increasing number of software vendors. The wide-spread introduction of SCA at a large software vendor, such as SAP, creates both technical as well as non-technical challenges. Technical challenges include high false positive and false negative rates. Examples of non-technical challenges are the insufficient security awareness among the developers and managers or the integration of SCA into a software development life-cycle that facilitates agile development. Moreover, software is not developed following a greenfield approach: SAP's security standards need to be passed to suppliers and partners in the same manner as SAP's customers begin to pass their security standards to SAP. In this paper, we briefly present how the SAP's Central Code Analysis Team introduced SCA at SAP and discuss open problems in using SCA both inside SAP as well as across the complete software production line, i. e., including suppliers and partners.},
	language = {en},
	urldate = {2025-01-09},
	publisher = {Gesellschaft für Informatik e.V.},
	author = {Brucker, Achim and Sodan, Uwe},
	year = {2014},
	keywords = {Automated Testing},
	pages = {91--101},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/DYAPGNA5/Brucker and Sodan - 2014 - Deploying static application security testing on a large scale.pdf:application/pdf},
}

@article{barbareschi_scrum_2022,
	title = {Scrum for safety: an agile methodology for safety-critical software systems},
	volume = {30},
	issn = {1573-1367},
	shorttitle = {Scrum for safety},
	url = {https://doi.org/10.1007/s11219-022-09593-2},
	doi = {10.1007/s11219-022-09593-2},
	abstract = {In the last years, agile methodologies are gaining substantial momentum, becoming increasingly popular in a broad plethora of industrial contexts. Unfortunately, many obstacles have been met while pursuing adoption in secure and safe systems, where different standards and operational constraints apply. In this paper, we propose a novel agile methodology for the development and innovation of safety-critical systems. In particular, we developed an extension of the well-known Scrum methodology and discussed the complete workflow. We finally validated the applicability of the proposed methodology over a real case study from the railway domain.},
	language = {en},
	number = {4},
	urldate = {2025-01-09},
	journal = {Software Quality Journal},
	author = {Barbareschi, Mario and Barone, Salvatore and Carbone, Riccardo and Casola, Valentina},
	month = dec,
	year = {2022},
	keywords = {Frameworks, Software development, Agile software development, Agile processes, Safety-critical software systems, Scrum4Safety},
	pages = {1067--1088},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/CHHGQX9X/Barbareschi et al. - 2022 - Scrum for safety an agile methodology for safety-.pdf:application/pdf},
}

@misc{smith_shift-left_2001,
	title = {Shift-{Left} {Testing}},
	url = {http://www.drdobbs.com/shift-left-testing/184404768},
	abstract = {Shift-left testing is how I refer to a better way of integrating the quality assurance (QA) and development parts of a software project. By linking these two functions at lower levels of management, you can expand your testing program while reducing manpower and equipment needs — sometimes by as much as an order of magnitude.},
	urldate = {2025-01-12},
	journal = {Dr. Dobb's},
	author = {Smith, Larry},
	month = sep,
	year = {2001},
	keywords = {Shift-Left},
	file = {Snapshot:/home/maurice/snap/zotero-snap/common/Zotero/storage/2ACBDCP4/184404768.html:text/html},
}

@inproceedings{dawoud_better_2024,
	title = {Better {Left} {Shift} {Security}! {Framework} for {Secure} {Software} {Development}},
	url = {https://ieeexplore.ieee.org/abstract/document/10628543},
	doi = {10.1109/EuroSPW61312.2024.00078},
	abstract = {The concept of security left-shifting focuses on integrating security processes, traditionally occurring later in the Software Development Life Cycle, into the early development phase. This approach is beneficial in mitigating security issues early on, before they manifest in released products, where the remediation cost is higher. In this study, we scrutinize the shift left approach from a security standpoint. We derive a set of criteria that, if satisfied, provide higher guarantees of successful left-shifting. We showcase the significance of these criteria in forming the shift left decision, showcased by left-shifting the software fuzzing operation. A holistic view of the shift left approach reveals several overarching challenges. We address these challenges in a prototypical framework that provides the basic building blocks for successfully integrating security processes into the development phase. Thus, this paper tackles several conceptual and technical challenges associated with left-shifting, forming a foundation for future works to build upon.},
	urldate = {2025-01-12},
	booktitle = {2024 {IEEE} {European} {Symposium} on {Security} and {Privacy} {Workshops} ({EuroS}\&{PW})},
	author = {Dawoud, Abdallah and Finster, Soeren and Coppik, Nicolas and Ashiwal, Virendra},
	month = jul,
	year = {2024},
	note = {ISSN: 2768-0657},
	keywords = {Security, Software, Costs, Shift-Left, Software development management, Fuzzing, Secure Software Development, Security Framework, Security Shift Left, Shift Left, Herausforderungen},
	pages = {642--649},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/2L4WG7Z5/Dawoud et al. - 2024 - Better Left Shift Security! Framework for Secure S.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/CWZ7TH9D/10628543.html:text/html},
}

@inproceedings{fitzgerald_scaling_2013,
	title = {Scaling agile methods to regulated environments: {An} industry case study},
	shorttitle = {Scaling agile methods to regulated environments},
	url = {https://ieeexplore.ieee.org/document/6606635},
	doi = {10.1109/ICSE.2013.6606635},
	abstract = {Agile development methods are growing in popularity with a recent survey reporting that more than 80\% of organizations now following an agile approach. Agile methods were seen initially as best suited to small, co-located teams developing non-critical systems. The first two constraining characteristics (small and co-located teams) have been addressed as research has emerged describing successful agile adoption involving large teams and distributed contexts. However, the applicability of agile methods for developing safety-critical systems in regulated environments has not yet been demonstrated unequivocally, and very little rigorous research exists in this area. Some of the essential characteristics of agile approaches appear to be incompatible with the constraints imposed by regulated environments. In this study we identify these tension points and illustrate through a detailed case study how an agile approach was implemented successfully in a regulated environment. Among the interesting concepts to emerge from the research are the notions of continuous compliance and living traceability.},
	urldate = {2025-01-14},
	booktitle = {2013 35th {International} {Conference} on {Software} {Engineering} ({ICSE})},
	author = {Fitzgerald, Brian and Stol, Klaas-Jan and O'Sullivan, Ryan and O'Brien, Donal},
	month = may,
	year = {2013},
	note = {ISSN: 1558-1225},
	keywords = {Documentation, Organizations, Software, Standards, Agile methods, Scrum, case study, Product development, Quality management, regulated environments, Safety, R-Scrum},
	pages = {863--872},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/3YBWEUSA/Fitzgerald et al. - 2013 - Scaling agile methods to regulated environments A.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/6IPQ6R9A/6606635.html:text/html},
}

@article{boehm_software_1984,
	title = {Software {Engineering} {Economics}},
	volume = {SE-10},
	issn = {1939-3520},
	url = {https://ieeexplore.ieee.org/abstract/document/5010193},
	doi = {10.1109/TSE.1984.5010193},
	abstract = {This paper summarizes the current state of the art and recent trends in software engineering economics. It provides an overview of economic analysis techniques and their applicability to software engineering and management. It surveys the field of software cost estimation, including the major estimation techniques available, the state of the art in algorithmic cost models, and the outstanding research issues in software cost estimation.},
	number = {1},
	urldate = {2025-01-14},
	journal = {IEEE Transactions on Software Engineering},
	author = {Boehm, Barry W.},
	month = jan,
	year = {1984},
	note = {Conference Name: IEEE Transactions on Software Engineering},
	keywords = {Costs, Software engineering, Analytical models, Computer programming costs, cost models, Engineering management, Life estimation, management decision aids, Microeconomics, Power generation economics, Resource management, software cost estimation, software economics, software engineering, software management, Software prototyping, State estimation},
	pages = {4--21},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/WEBBNXMT/Boehm - 1984 - Software Engineering Economics.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/TLELY77C/5010193.html:text/html},
}

@incollection{boehm_software_1984-1,
	address = {Berlin, Heidelberg},
	title = {Software {Engineering} {Economics}},
	isbn = {978-3-642-48354-7},
	url = {https://doi.org/10.1007/978-3-642-48354-7_5},
	abstract = {This paper summarizes the current state of the art and recent trends in software engineering economics. It provides an overview of economic analysis techniques and their applicability to software engineering and management. It surveys the field of software cost estimation, including the major estimation techniques available, the state of the art in algorithmic cost models, and the outstanding research issues in software cost estimation.},
	language = {en},
	urldate = {2025-01-15},
	booktitle = {Pioneers and {Their} {Contributions} to {Software} {Engineering}: sd\&m {Conference} on {Software} {Pioneers}, {Bonn}, {June} 28/29, 2001, {Original} {Historic} {Contributions}},
	publisher = {Springer},
	author = {Boehm, Barry W.},
	editor = {Broy, Manfred and Denert, Ernst},
	year = {1984},
	doi = {10.1007/978-3-642-48354-7_5},
	keywords = {Shift-Left},
	pages = {99--150},
	file = {Boehm - 2001 - Software Engineering Economics.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/MQFV9HYE/Boehm - 2001 - Software Engineering Economics.pdf:application/pdf},
}

@article{rajapakse_challenges_2022,
	title = {Challenges and solutions when adopting {DevSecOps}: {A} systematic review},
	volume = {141},
	issn = {0950-5849},
	shorttitle = {Challenges and solutions when adopting {DevSecOps}},
	url = {https://www.sciencedirect.com/science/article/pii/S0950584921001543},
	doi = {10.1016/j.infsof.2021.106700},
	abstract = {Context:
DevOps (Development and Operations) has become one of the fastest-growing software development paradigms in the industry. However, this trend has presented the challenge of ensuring secure software delivery while maintaining the agility of DevOps. The efforts to integrate security in DevOps have resulted in the DevSecOps paradigm, which is gaining significant interest from both industry and academia. However, the adoption of DevSecOps in practice is proving to be a challenge.
Objective:
This study aims to systemize the knowledge about the challenges faced by practitioners when adopting DevSecOps and the proposed solutions reported in the literature. We also aim to identify the areas that need further research in the future.
Method:
We conducted a Systematic Literature Review of 54 peer-reviewed studies. The thematic analysis method was applied to analyze the extracted data.
Results:
We identified 21 challenges related to adopting DevSecOps, 31 specific solutions, and the mapping between these findings. We also determined key gap areas in this domain by holistically evaluating the available solutions against the challenges. The results of the study were classified into four themes: People, Practices, Tools, and Infrastructure. Our findings demonstrate that tool-related challenges and solutions were the most frequently reported, driven by the need for automation in this paradigm. Shift-left security and continuous security assessment were two key practices recommended for DevSecOps. People-related factors were considered critical for successful DevSecOps adoption but less studied.
Conclusions:
We highlight the need for developer-centered application security testing tools that target the continuous practices in DevSecOps. More research is needed on how the traditionally manual security practices can be automated to suit rapid software deployment cycles. Finally, achieving a suitable balance between the speed of delivery and security is a significant issue practitioners face in the DevSecOps paradigm.},
	urldate = {2025-01-16},
	journal = {Information and Software Technology},
	author = {Rajapakse, Roshan N. and Zahedi, Mansooreh and Babar, M. Ali and Shen, Haifeng},
	month = jan,
	year = {2022},
	keywords = {Security, DevOps, Shift-Left, DevSecOps, Continuous Software Engineering, Systematic Literature Review},
	pages = {106700},
	file = {ScienceDirect Snapshot:/home/maurice/snap/zotero-snap/common/Zotero/storage/442S7RJK/S0950584921001543.html:text/html;Submitted Version:/home/maurice/snap/zotero-snap/common/Zotero/storage/LXQZ8DVM/Rajapakse et al. - 2022 - Challenges and solutions when adopting DevSecOps .pdf:application/pdf},
}

@inproceedings{arnold_detecting_2020,
	title = {Detecting {Software} {Security} {Vulnerability} during an {Agile} {Development} by {Testing} the {Changes} to the {Security} {Posture} of {Software} {Systems}},
	url = {https://ieeexplore.ieee.org/abstract/document/9458121?casa_token=jmGqB1gli8MAAAAA:MyU8qjaYZqKPNdaStq8nAsJjxD8Nl2ENGkTwJQTtTa3L9to9gfOtUWQYaJyOLh7juEXRc5__},
	doi = {10.1109/CSCI51800.2020.00323},
	abstract = {The purpose of this quantitative quasi-experimental study is to identify the possible correlation between software changes and the likelihood that software releases developed using an agile methodology like DevOps will introduce vulnerabilities into the software application when integrated. There are several scholarly articles that provide details on how Agile development methodologies like scrum and DevOps rely on automated testing for security. The majority of literature on the subject recommend manual security and penetration testing, but there is currently no objective measure to determine when this manual testing should take place. In Agile scrum and in DevOps, manual security testing is usually conducted after a large feature is completed and integrated into production. If a correlation can be found between aspects of software changes and their propensity to introduce vulnerabilities into a software application, then that data can be used to build an objective process for measuring when manual security testing should be performed in Agile development.},
	urldate = {2025-01-16},
	booktitle = {2020 {International} {Conference} on {Computational} {Science} and {Computational} {Intelligence} ({CSCI})},
	author = {Arnold, Benjamin and Qu, Yanzhen},
	month = dec,
	year = {2020},
	keywords = {DevOps, Production, Manuals, Automated Testing, Agile Development, Correlation, Scientific computing, SDLC, Software systems, Software testing, Software Testing, Tools, Vulnerability},
	pages = {1743--1748},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/NU2U65BY/Arnold and Qu - 2020 - Detecting Software Security Vulnerability during an Agile Development by Testing the Changes to the.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/WA9TFY9F/9458121.html:text/html},
}

@misc{firesmith_four_2015,
	title = {Four {Types} of {Shift} {Left} {Testing}},
	url = {https://web.archive.org/web/20150905082941/https://insights.sei.cmu.edu/sei_blog/2015/03/four-types-of-shift-left-testing.html},
	abstract = {One of the most important and widely discussed trends within the software testing community is shift left testing, which simply means beginning testing as early as practical in the lifecycle. What is less widely known, both inside and outside the testing community, is that testers can employ four fundamentally-different approaches to shift testing to the left. Unfortunately, different people commonly use the generic term shift left to mean different approaches, which can lead to serious misunderstandings. This blog post explains the importance of shift left testing and defines each of these four approaches using variants of the classic V model to illustrate them.},
	urldate = {2025-01-16},
	journal = {Four Types of Shift Left Testing},
	author = {Firesmith, Donald},
	month = sep,
	year = {2015},
	keywords = {Shift-Left},
	file = {Snapshot:/home/maurice/snap/zotero-snap/common/Zotero/storage/2GZZUZ2J/four-types-of-shift-left-testing.html:text/html},
}

@inproceedings{rani_shift-left_2023-1,
	title = {Shift-{Left} {Testing} in {DevOps}: {A} {Study} of {Benefits}, {Challenges}, and {Best} {Practices}},
	shorttitle = {Shift-{Left} {Testing} in {DevOps}},
	url = {https://ieeexplore.ieee.org/abstract/document/10404436},
	doi = {10.1109/ICACRS58579.2023.10404436},
	abstract = {DevOps aims to integrate software development and operations to improve products and provide value to consumers. However, many firms implement DevOps primarily from a traditional standpoint, that is, from development to operations. Shift-Left Testing, a crucial aspect of agile software development, places strong emphasis on incorporating test cases at the beginning stages of a project’s life cycle. This study explores the effects of implementing Shift-Left Testing approach. Research examines how relocating testing activities to initial phases of software development accelerates input and decreases overall development time. Study investigates benefits of this strategy, such as defect prevention and speedier delivery, as well as implications for quality software development. Study contributes to knowledge of Shift-Left Testing’s usefulness in contemporary software development techniques by assessing early results and future activities in this setting. Examining shift of organizations from traditional to continuous testing, this research evaluates current best practices in this domain. Proposed model of Shift-Left Testing is to understand how it’s currently being used and figure out best ways to make it work well. Findings emphasize that achieving and integrating Shift-Left Testing poses in-sprint testing to be highly challenging. Study Encompasses Goals, Methodology, Potential Outcomes, and Comparison of Defect Detection and Cost to Fix Bugs in a Few Case Studies, Establishing It as a Valuable Resource for Professionals and Researchers in the Field.},
	urldate = {2025-01-20},
	booktitle = {2023 2nd {International} {Conference} on {Automation}, {Computing} and {Renewable} {Systems} ({ICACRS})},
	author = {Rani, V Shobha and Babu, Dr A Ramesh and Deepthi, K. and Reddy, Vallem Ranadheer},
	month = dec,
	year = {2023},
	keywords = {Software, Testing, and Continuous-Testing, Best practices, Computer bugs, Costs, DevOps, Shift-left Testing, Virtual prototyping, Shift-Left},
	pages = {1675--1680},
	file = {IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/NMMJPEE9/10404436.html:text/html;Rani et al. - 2023 - Shift-Left Testing in DevOps A Study of Benefits,.pdf:/home/maurice/snap/zotero-snap/common/Zotero/storage/H3KAKTVS/Rani et al. - 2023 - Shift-Left Testing in DevOps A Study of Benefits,.pdf:application/pdf},
}

@inproceedings{blakley_information_2001,
	address = {Cloudcroft New Mexico},
	title = {Information security is information risk management},
	isbn = {978-1-58113-457-5},
	url = {https://dl.acm.org/doi/10.1145/508171.508187},
	doi = {10.1145/508171.508187},
	abstract = {Information security is important in proportion to an organization's dependence on information technology. When an organization's information is exposed to risk, the use of information security technology is obviously appropriate. Current information security technology, however, deals with only a small fraction of the problem of information risk. In fact, the evidence increasingly suggests that information security technology does not reduce information risk very effectively.This paper argues that we must reconsider our approach to information security from the ground up if we are to deal effectively with the problem of information risk, and proposes a new model inspired by the history of medicine.},
	language = {en},
	urldate = {2025-01-22},
	booktitle = {Proceedings of the 2001 workshop on {New} security paradigms},
	publisher = {ACM},
	author = {Blakley, Bob and McDermott, Ellen and Geer, Dan},
	month = sep,
	year = {2001},
	pages = {97--104},
}

@inproceedings{singh_analysis_2024,
	title = {Analysis of {Web} {Application} {Vulnerabilities} using {Dynamic} {Application} {Security} {Testing}},
	url = {https://ieeexplore.ieee.org/document/10543484/authors#authors},
	doi = {10.1109/I2CT61223.2024.10543484},
	abstract = {In the era of ubiquitous digital connectivity, securing software applications against cyber threats is paramount. Dynamic Application Security Testing (DAST) has emerged as a crucial methodology in the realm of cybersecurity, providing a dynamic, real-time approach to identify and mitigate vulnerabilities within software applications. This research paper delves into the significance and application of DAST in fortifying cybersecurity measures. DAST represents a departure from traditional static testing methods, which analyze source code or binaries, by assessing applications during runtime. The methodology involves the active, controlled probing of live applications through simulated cyber-attacks, including injection of malicious payloads and emulation of common exploit techniques. By dynamically assessing how applications respond to these simulated threats, DAST offers a real-world evaluation of security posture, facilitating the identification of potential vulnerabilities.This research paper analyzed the Dynamic Application Security Testing (DAST) reports for different web applications over the past two years and provide a valuable resource for cybersecurity practitioners, researchers, and organizations striving to adopt effective strategies in safeguarding their digital assets against evolving cyber threats in the current environment.},
	urldate = {2025-01-30},
	booktitle = {2024 {IEEE} 9th {International} {Conference} for {Convergence} in {Technology} ({I2CT})},
	author = {Singh, Ravinder and Kumar Gupta, Mukesh and Patil, Dipak Raghunath and Maruti Patil, Sarang},
	month = apr,
	year = {2024},
	keywords = {Application security, Application Security, Organizations, OWASP Top 10, Real-time systems, Runtime, Software, Source coding, Stakeholders, vulnerabilities},
	pages = {1--6},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/B467LH66/Singh et al. - 2024 - Analysis of Web Application Vulnerabilities using Dynamic Application Security Testing.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/GFN3DP6L/authors.html:text/html},
}

@article{chess_static_2004,
	title = {Static analysis for security},
	volume = {2},
	issn = {1558-4046},
	url = {https://ieeexplore.ieee.org/document/1366126},
	doi = {10.1109/MSP.2004.111},
	abstract = {All software projects are guaranteed to have one artifact in common \$source code. Together with architectural risk analysis, code review for security ranks very high on the list of software security best practices. We look at how to automate source-code security analysis with static analysis tools.},
	number = {6},
	urldate = {2025-01-30},
	journal = {IEEE Security \& Privacy},
	author = {Chess, B. and McGraw, G.},
	month = nov,
	year = {2004},
	note = {Conference Name: IEEE Security \& Privacy},
	keywords = {Application software, Best practices, Buildings, Computer bugs, Computer languages, Computer security, Costs, Privacy, Rats, Risk analysis, software development life cycle, source code, static analysis},
	pages = {76--79},
	file = {Full Text PDF:/home/maurice/snap/zotero-snap/common/Zotero/storage/IRTWJW2Q/Chess and McGraw - 2004 - Static analysis for security.pdf:application/pdf;IEEE Xplore Abstract Record:/home/maurice/snap/zotero-snap/common/Zotero/storage/R7N2Z3IR/1366126.html:text/html},
}
